-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.recipients
(
    id uuid NOT NULL,
    status character varying NOT NULL DEFAULT 'empty',
    "user" uuid,
    guid character varying(64) NOT NULL,
    idir character varying(24),
    employee_number character varying(6),
    organization integer,
    division character varying,
    branch character varying,
    contact uuid,
    supervisor uuid,
    bcgeu boolean NOT NULL DEFAULT 'false',
    retirement boolean NOT NULL DEFAULT 'false',
    retirement_date timestamp without time zone,
    notes text,
    created_at timestamp with time zone NOT NULL DEFAULT 'now()',
    updated_at timestamp with time zone NOT NULL DEFAULT 'now()',
    PRIMARY KEY (id),
    CONSTRAINT recipient_idir UNIQUE (idir),
    CONSTRAINT recipient_guid UNIQUE (guid)
);

CREATE TABLE IF NOT EXISTS public.organizations
(
    id serial NOT NULL,
    name character varying(128) NOT NULL,
    abbreviation character varying(64) NOT NULL,
    previous_service_pins boolean DEFAULT 'false',
    active boolean NOT NULL DEFAULT 'true',
    PRIMARY KEY (id),
    CONSTRAINT org_name UNIQUE (name),
    CONSTRAINT org_abbreviation UNIQUE (abbreviation),
    CONSTRAINT org_id UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS public.contacts
(
    id uuid NOT NULL,
    first_name character varying(128) NOT NULL,
    last_name character varying(128) NOT NULL,
    office_email character varying(256) NOT NULL,
    office_phone character varying(64),
    office_address uuid,
    personal_email character varying(256),
    personal_phone character varying(64),
    personal_address uuid,
    created_at timestamp with time zone NOT NULL DEFAULT 'now()',
    updated_at timestamp with time zone NOT NULL DEFAULT 'now()',
    PRIMARY KEY (id),
    CONSTRAINT contacts_id_unq UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS public.addresses
(
    id uuid NOT NULL,
    pobox character varying(16),
    street1 character varying(256) NOT NULL,
    street2 character varying(256),
    postal_code character varying(7) NOT NULL,
    community character varying(256) NOT NULL,
    province character varying(256) NOT NULL DEFAULT 'British Columbia',
    country character varying(256) NOT NULL DEFAULT 'Canada',
    created_at timestamp with time zone NOT NULL DEFAULT 'now()',
    updated_at timestamp with time zone NOT NULL DEFAULT 'now()',
    PRIMARY KEY (id),
    CONSTRAINT address_id UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS public.awards
(
    id serial NOT NULL,
    short_code character varying(64),
    type character varying NOT NULL,
    milestone integer NOT NULL,
    label character varying(256) NOT NULL,
    description text,
    image_url character varying(512),
    quantity integer,
    active boolean NOT NULL DEFAULT 'true',
    PRIMARY KEY (id),
    CONSTRAINT award_vendor UNIQUE (short_code),
    CONSTRAINT award_name UNIQUE (label, milestone),
    CONSTRAINT award_id UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS public.award_options
(
    id serial NOT NULL,
    award integer NOT NULL,
    type character varying(256) NOT NULL,
    name character varying(256) NOT NULL,
    value character varying(256) NOT NULL,
    customizable boolean NOT NULL DEFAULT 'false',
    label character varying(256) NOT NULL,
    description text,
    CONSTRAINT option_code PRIMARY KEY (id),
    CONSTRAINT award_option_single UNIQUE (type, name, value, award),
    CONSTRAINT award_option_id UNIQUE (id)
);

COMMENT ON CONSTRAINT award_option_single ON public.award_options
    IS 'Ensure unique option for given award and option type.';

CREATE TABLE IF NOT EXISTS public.pecsf_regions
(
    name character varying(256) NOT NULL,
    PRIMARY KEY (name),
    CONSTRAINT pecsf_region_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.pecsf_charities
(
    id serial NOT NULL,
    label character varying(256) NOT NULL,
    region character varying(256) NOT NULL,
    vendor character varying(16) NOT NULL,
    active boolean NOT NULL DEFAULT 'true',
    CONSTRAINT "primary" PRIMARY KEY (id),
    CONSTRAINT pecsf_charity_name UNIQUE (label, region),
    CONSTRAINT pecsf_vendor UNIQUE (vendor),
    CONSTRAINT pecsf_id UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS public.milestones
(
    name integer NOT NULL,
    label character varying NOT NULL,
    active boolean NOT NULL DEFAULT 'true',
    PRIMARY KEY (name),
    CONSTRAINT milestone_year UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL,
    idir character varying(64) NOT NULL,
    guid character varying(256) NOT NULL,
    role character varying(32) NOT NULL DEFAULT 'inactive',
    first_name character varying(256),
    last_name character varying(256),
    email character varying(256),
    password character varying(256),
    created_at timestamp with time zone NOT NULL DEFAULT 'now()',
    updated_at timestamp with time zone NOT NULL DEFAULT 'now()',
    PRIMARY KEY (idir),
    CONSTRAINT user_guid UNIQUE (guid),
    CONSTRAINT user_idir UNIQUE (idir),
    CONSTRAINT user_email UNIQUE (email),
    CONSTRAINT user_id UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS public.ceremonies
(
    id uuid NOT NULL,
    venue character varying NOT NULL,
    address uuid,
    datetime timestamp with time zone NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT 'now()',
    updated_at timestamp with time zone NOT NULL DEFAULT 'now()',
    active boolean NOT NULL DEFAULT 'true',
    PRIMARY KEY (id),
    CONSTRAINT event UNIQUE (datetime, venue)
);

COMMENT ON CONSTRAINT event ON public.ceremonies
    IS 'Ensure event is unique.';

CREATE TABLE IF NOT EXISTS public.attendees
(
    id uuid NOT NULL,
    recipient uuid NOT NULL,
    ceremony uuid NOT NULL,
    guest integer,
    status character varying NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT 'now()',
    updated_at timestamp with time zone NOT NULL DEFAULT 'now()',
    PRIMARY KEY (id),
    CONSTRAINT attendee_rsvp UNIQUE (recipient, ceremony, guest),
    CONSTRAINT attendee_id UNIQUE (id)
);

COMMENT ON COLUMN public.attendees.guest
    IS 'Indexes recipient guest(s).';

CREATE TABLE IF NOT EXISTS public.accommodations
(
    name character varying(24) NOT NULL,
    label character varying(256) NOT NULL,
    type character varying(16) NOT NULL,
    description text,
    active boolean NOT NULL DEFAULT 'true',
    PRIMARY KEY (name),
    CONSTRAINT accommodations_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.accommodation_selections
(
    accommodation character varying NOT NULL,
    attendee uuid NOT NULL,
    CONSTRAINT accommodation_selections_id PRIMARY KEY (accommodation, attendee),
    CONSTRAINT accommodation_per_attendee UNIQUE (accommodation, attendee)
);

CREATE TABLE IF NOT EXISTS public.transactions
(
    id serial NOT NULL,
    recipient uuid,
    "user" uuid,
    code character varying(16) NOT NULL,
    error boolean NOT NULL DEFAULT 'false',
    description character varying(256) NOT NULL,
    details text,
    created_at timestamp with time zone NOT NULL DEFAULT 'now()',
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.settings
(
    name character varying(256) NOT NULL,
    label character varying(256) NOT NULL,
    value character varying(256) NOT NULL,
    PRIMARY KEY (name),
    CONSTRAINT setting_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.service_selections
(
    id uuid NOT NULL,
    recipient uuid NOT NULL,
    milestone integer NOT NULL,
    qualifying_year integer,
    service_years integer NOT NULL,
    cycle integer NOT NULL,
    previous_registration boolean NOT NULL DEFAULT 'false',
    previous_award boolean NOT NULL DEFAULT 'false',
    delegated boolean NOT NULL DEFAULT 'false',
    confirmed boolean NOT NULL DEFAULT 'false',
    ceremony_opt_out boolean NOT NULL DEFAULT 'false',
    survey_opt_in boolean NOT NULL DEFAULT 'false',
    created_at timestamp with time zone NOT NULL DEFAULT 'now()',
    updated_at timestamp with time zone NOT NULL DEFAULT 'now()',
    CONSTRAINT service_selection_id PRIMARY KEY (id),
    CONSTRAINT recipient_cycle_unq UNIQUE (recipient, cycle)
);

CREATE TABLE IF NOT EXISTS public.qualifying_years
(
    name integer NOT NULL,
    current boolean NOT NULL DEFAULT 'false',
    PRIMARY KEY (name),
    CONSTRAINT qualifying_year_unq UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.communities
(
    name character varying(256) NOT NULL,
    region character varying(256),
    PRIMARY KEY (name),
    CONSTRAINT community_name UNIQUE (region, name)
);

CREATE TABLE IF NOT EXISTS public.provinces
(
    name character varying(256) NOT NULL,
    PRIMARY KEY (name),
    CONSTRAINT province_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.user_roles
(
    name character varying(64) NOT NULL,
    label character varying(256) NOT NULL,
    PRIMARY KEY (name),
    CONSTRAINT user_roles_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.user_permissions
(
    name character varying(64) NOT NULL,
    label character varying(256) NOT NULL,
    PRIMARY KEY (name),
    CONSTRAINT user_permissions_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.user_roles_permissions_selections
(
    permission character varying(64) NOT NULL,
    role character varying(64) NOT NULL,
    PRIMARY KEY (permission, role),
    CONSTRAINT permissions_roles_selection_unq UNIQUE (role, permission)
);

CREATE TABLE IF NOT EXISTS public.user_organizations_selections
(
    "user" uuid NOT NULL,
    organization integer NOT NULL,
    PRIMARY KEY ("user", organization),
    CONSTRAINT user_organizations_selections_unq UNIQUE ("user", organization)
);

CREATE TABLE IF NOT EXISTS public.award_option_selections
(
    service uuid NOT NULL,
    award_option integer NOT NULL,
    custom_value character varying(256),
    pecsf_charity integer,
    CONSTRAINT service_option_primary_key PRIMARY KEY (service, award_option),
    CONSTRAINT pecsf_selection UNIQUE (award_option, pecsf_charity, service),
    CONSTRAINT award_option_selection UNIQUE (award_option, service)
);

COMMENT ON CONSTRAINT pecsf_selection ON public.award_option_selections
    IS 'Ensure PECSF charity is unique for award selection.';

CREATE TABLE IF NOT EXISTS public.award_selections
(
    id uuid NOT NULL,
    award integer NOT NULL,
    CONSTRAINT award_selection_primary_key PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.recipients
    ADD CONSTRAINT recipients_user_ref FOREIGN KEY ("user")
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fki_recipients_user_ref
    ON public.recipients("user");


ALTER TABLE IF EXISTS public.recipients
    ADD CONSTRAINT recipients_organization_ref FOREIGN KEY (organization)
    REFERENCES public.organizations (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS fki_recipients_organization_ref
    ON public.recipients(organization);


ALTER TABLE IF EXISTS public.recipients
    ADD CONSTRAINT recipients_contact_ref FOREIGN KEY (contact)
    REFERENCES public.contacts (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fki_recipients_contact_ref
    ON public.recipients(contact);


ALTER TABLE IF EXISTS public.recipients
    ADD CONSTRAINT recipients_supervisor_ref FOREIGN KEY (supervisor)
    REFERENCES public.contacts (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fki_recipients_supervisor_ref
    ON public.recipients(supervisor);


ALTER TABLE IF EXISTS public.contacts
    ADD CONSTRAINT contact_office_address_fk FOREIGN KEY (office_address)
    REFERENCES public.addresses (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fki_contact_office_address_fk
    ON public.contacts(office_address);


ALTER TABLE IF EXISTS public.contacts
    ADD CONSTRAINT contact_personal_address_fk FOREIGN KEY (personal_address)
    REFERENCES public.addresses (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fki_contact_personal_address_fk
    ON public.contacts(personal_address);


ALTER TABLE IF EXISTS public.addresses
    ADD CONSTRAINT addresses_provinces_ref FOREIGN KEY (province)
    REFERENCES public.provinces (name) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fki_addresses_provinces_ref
    ON public.addresses(province);


ALTER TABLE IF EXISTS public.awards
    ADD CONSTRAINT awards_milestones_ref FOREIGN KEY (milestone)
    REFERENCES public.milestones (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS fki_awards_milestones_ref
    ON public.awards(milestone);


ALTER TABLE IF EXISTS public.award_options
    ADD CONSTRAINT award_options_awards_ref FOREIGN KEY (award)
    REFERENCES public.awards (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_award_options_awards_ref
    ON public.award_options(award);


ALTER TABLE IF EXISTS public.pecsf_charities
    ADD CONSTRAINT pecsf_charities_regions_ref FOREIGN KEY (region)
    REFERENCES public.pecsf_regions (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS fki_pecsf_charities_regions_ref
    ON public.pecsf_charities(region);


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT role_ref_fk FOREIGN KEY (role)
    REFERENCES public.user_roles (name) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fki_role_ref_fk
    ON public.users(role);


ALTER TABLE IF EXISTS public.ceremonies
    ADD CONSTRAINT ceremony_address_fk FOREIGN KEY (address)
    REFERENCES public.addresses (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fki_ceremony_address_fk
    ON public.ceremonies(address);


ALTER TABLE IF EXISTS public.attendees
    ADD CONSTRAINT attendees_recipients_ref FOREIGN KEY (recipient)
    REFERENCES public.recipients (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_attendees_recipients_ref
    ON public.attendees(recipient);


ALTER TABLE IF EXISTS public.attendees
    ADD CONSTRAINT attendees_ceremonies_ref FOREIGN KEY (ceremony)
    REFERENCES public.ceremonies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS fki_attendees_ceremonies_ref
    ON public.attendees(ceremony);


ALTER TABLE IF EXISTS public.accommodation_selections
    ADD CONSTRAINT accommodations_attendees_ref FOREIGN KEY (attendee)
    REFERENCES public.attendees (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_accommodations_attendees_ref
    ON public.accommodation_selections(attendee);


ALTER TABLE IF EXISTS public.accommodation_selections
    ADD CONSTRAINT accommodations_selections_ref FOREIGN KEY (accommodation)
    REFERENCES public.accommodations (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS fki_accommodations_selections_ref
    ON public.accommodation_selections(accommodation);


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT transactions_users_ref FOREIGN KEY ("user")
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS fki_transactions_users_ref
    ON public.transactions("user");


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT transactions_recipients_ref FOREIGN KEY (recipient)
    REFERENCES public.recipients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public.service_selections
    ADD CONSTRAINT service_recipients_ref FOREIGN KEY (recipient)
    REFERENCES public.recipients (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.service_selections
    ADD CONSTRAINT service_milestones_ref FOREIGN KEY (milestone)
    REFERENCES public.milestones (name) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public.service_selections
    ADD CONSTRAINT service_qualifying_years_ref FOREIGN KEY (qualifying_year)
    REFERENCES public.qualifying_years (name) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fki_service_qualifying_years_ref
    ON public.service_selections(qualifying_year);


ALTER TABLE IF EXISTS public.user_roles_permissions_selections
    ADD CONSTRAINT user_roles_permissions_permission FOREIGN KEY (permission)
    REFERENCES public.user_permissions (name) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_user_roles_permissions_permission
    ON public.user_roles_permissions_selections(permission);


ALTER TABLE IF EXISTS public.user_roles_permissions_selections
    ADD CONSTRAINT user_roles_permissions_role FOREIGN KEY (role)
    REFERENCES public.user_roles (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS fki_user_roles_permissions_role
    ON public.user_roles_permissions_selections(role);


ALTER TABLE IF EXISTS public.user_organizations_selections
    ADD CONSTRAINT user_organizations_selections_users_ref FOREIGN KEY ("user")
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_user_organizations_selections_users_ref
    ON public.user_organizations_selections("user");


ALTER TABLE IF EXISTS public.user_organizations_selections
    ADD CONSTRAINT user_organizations_selections_org_ref FOREIGN KEY (organization)
    REFERENCES public.organizations (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_user_organizations_selections_org_ref
    ON public.user_organizations_selections(organization);


ALTER TABLE IF EXISTS public.award_option_selections
    ADD CONSTRAINT award_options_service_ref FOREIGN KEY (service)
    REFERENCES public.award_selections (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_award_options_service_ref
    ON public.award_option_selections(service);


ALTER TABLE IF EXISTS public.award_option_selections
    ADD CONSTRAINT award_options_ref FOREIGN KEY (award_option)
    REFERENCES public.award_options (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_award_options_ref
    ON public.award_option_selections(award_option);


ALTER TABLE IF EXISTS public.award_option_selections
    ADD CONSTRAINT award_options_pecsf_ref FOREIGN KEY (pecsf_charity)
    REFERENCES public.pecsf_charities (id) MATCH SIMPLE
    ON UPDATE SET NULL
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS fki_award_options_pecsf_ref
    ON public.award_option_selections(pecsf_charity);


ALTER TABLE IF EXISTS public.award_selections
    ADD CONSTRAINT award_service_ref FOREIGN KEY (id)
    REFERENCES public.service_selections (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_award_service_ref
    ON public.award_selections(id);


ALTER TABLE IF EXISTS public.award_selections
    ADD CONSTRAINT awards_seleciton_awards_ref FOREIGN KEY (award)
    REFERENCES public.awards (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_awards_seleciton_awards_ref
    ON public.award_selections(award);

END;